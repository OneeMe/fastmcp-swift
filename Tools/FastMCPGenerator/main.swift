import Foundation

@main
struct GeneratorMain {
    static func main() throws {
        let args = CommandLine.arguments
        var sources: [String] = []
        var output: String?
        var i = 1
        while i < args.count {
            let arg = args[i]
            if arg == "--output" { output = args[i+1]; i += 2; continue }
            if arg == "--source" { sources.append(args[i+1]); i += 2; continue }
            i += 1
        }

        let discovered = try discoverRegisterToolTypes(in: sources)
        let content = renderFile(discoveredTypes: discovered)

        let outPath = output ?? "_FastMCP_Generated_Tools.swift"
        try content.write(toFile: outPath, atomically: true, encoding: .utf8)
    }

    private static func discoverRegisterToolTypes(in filePaths: [String]) throws -> [String] {
        var result: [String] = []
        // Simple single-line regex; good enough for typical cases
        let pattern = "@RegisterTool[\\t\\n\\r ]*(?:public\\s+)?(?:final\\s+)?(?:class|struct)\\s+([A-Za-z_][A-Za-z0-9_]*)"
        let typeRegex = try NSRegularExpression(pattern: pattern)
        for path in filePaths {
            guard FileManager.default.fileExists(atPath: path) else { continue }
            let text = try String(contentsOfFile: path, encoding: .utf8)
            let range = NSRange(location: 0, length: (text as NSString).length)
            typeRegex.enumerateMatches(in: text, options: [], range: range) { match, _, _ in
                if let match = match, match.numberOfRanges >= 2 {
                    let nameRange = match.range(at: 1)
                    if let swiftRange = Range(nameRange, in: text) {
                        let name = String(text[swiftRange])
                        result.append(name)
                    }
                }
            }
        }
        return Array(Set(result)).sorted()
    }

    private static func renderFile(discoveredTypes: [String]) -> String {
        var lines: [String] = []
        lines.append("// !!! DO NOT EDIT !!!")
        lines.append("// Generated by FastMCPBuildToolPlugin")
        lines.append("")
        lines.append("import FastMCPProtocol")
        lines.append("")
        lines.append("public func registerAllDiscoveredTools() {")
        if discoveredTypes.isEmpty {
            lines.append("    // No tools discovered")
        } else {
            for type in discoveredTypes {
                lines.append("    MCPToolTypeRegistry.shared.register(\(type).self)")
            }
        }
        lines.append("}")
        lines.append("")
        return lines.joined(separator: "\n")
    }
}


